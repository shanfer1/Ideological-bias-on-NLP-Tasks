# -*- coding: utf-8 -*-
"""logisticregression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mFPgBBj0jo4AVE5lEh2enGIgI3oQ6Fzu
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

#Ignore Future Warnings
from warnings import simplefilter
simplefilter(action='ignore', category=FutureWarning)

df_cnn = pd.read_csv("./data/preprocessed_nov_23_df_cnn_topic_combined.csv")
df_cnn.shape

df_cnn.head()

plt.figure(figsize=(12,5))
sns.countplot(x=df_cnn.topic, color='yellow')
plt.title('Tweets Topics Distribution', fontsize=16)
plt.ylabel('Number of Tweets', fontsize=16)
plt.xlabel('Topic', fontsize=16)
plt.xticks(rotation='vertical');

def print_evaluators(test,pred):
    print(classification_report(test,pred)) #Using classification_report function to get the summary of how good the classifier is 
    print(accuracy_score(test, pred)) #Using accuracy_score function to get the overall accuracy

"""# Training and Testing it on Left """

train_text, test_text, train_labels, test_labels = train_test_split(df_cnn["clean_text"], df_cnn["topicEncoded"], train_size=0.7, random_state=5)

print("Train x size :", train_text.shape)
print("Train y size :", train_labels.shape)
print("Test x size :", test_text.shape)
print("Test y size :", test_labels.shape)

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(train_text)
trainFeatureSet = countVector.transform(train_text)
testFeatureSet = countVector.transform(test_text)

testFeatureSet.shape

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,train_labels)

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,test_labels)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(test_labels,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(train_text)
tfidTestFeatures = tfIdVector.transform(test_text)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,train_labels)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,test_labels)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(test_labels,predLogReg2)

"""# Training and Testing it on Right"""

df_fox = pd.read_csv("./data/preprocessed_nov_23_df_fox_topic_combined.csv")
df_fox.shape

df_reuters = pd.read_csv("./data/preprocessed_nov_23_df_reuters_topic_combined.csv")
df_reuters.shape

print(df_fox['topic'].value_counts())

plt.figure(figsize=(12,5))
sns.countplot(x=df_fox.topic, color='yellow')
plt.title('Tweets Topics Distribution', fontsize=16)
plt.ylabel('Number of Tweets', fontsize=16)
plt.xlabel('Topic', fontsize=16)
plt.xticks(rotation='vertical');

train_text, test_text, train_labels, test_labels = train_test_split(df_fox["clean_text"], df_fox["topicEncoded"], train_size=0.7, random_state=5)

print("Train x size :", train_text.shape)
print("Train y size :", train_labels.shape)
print("Test x size :", test_text.shape)
print("Test y size :", test_labels.shape)

plt.figure(figsize=(12,5))
sns.countplot(x=train_labels, color='yellow')
plt.title('Tweets Topics Distribution', fontsize=16)
plt.ylabel('Number of Tweets', fontsize=16)
plt.xlabel('Topic', fontsize=16)
plt.xticks(rotation='vertical');

plt.figure(figsize=(12,5))
sns.countplot(x=test_labels, color='yellow')
plt.title('Tweets Topics Distribution', fontsize=16)
plt.ylabel('Number of Tweets', fontsize=16)
plt.xlabel('Topic', fontsize=16)
plt.xticks(rotation='vertical');

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(train_text)
trainFeatureSet = countVector.transform(train_text)
testFeatureSet = countVector.transform(test_text)

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,train_labels)

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,test_labels)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(test_labels,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(train_text)
tfidTestFeatures = tfIdVector.transform(test_text)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,train_labels)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,test_labels)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(test_labels,predLogReg2)

"""# Training it on Left and Testing it on Right"""

X_left=df_cnn['clean_text']
Y_left=df_cnn['topicEncoded']
X_Right=df_fox['clean_text']
Y_Right =df_fox['topicEncoded']
X_neutral=df_reuters['clean_text']
Y_neutral=df_reuters['topicEncoded']

X_left.head()

Y_left.head()

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(X_left)
trainFeatureSet = countVector.transform(X_left)
testFeatureSet = countVector.transform(X_Right)

trainFeatureSet.shape

testFeatureSet.shape

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,Y_left)

Y_Right.shape

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,Y_Right)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(Y_Right,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(X_left)
tfidTestFeatures = tfIdVector.transform(X_Right)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,Y_left)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,Y_Right)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(Y_Right,predLogReg2)

"""# Train on Left adn test it on nuetral"""

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(X_left)
trainFeatureSet = countVector.transform(X_left)
testFeatureSet = countVector.transform(X_neutral)

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,Y_left)

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,Y_neutral)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(Y_neutral,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(X_left)
tfidTestFeatures = tfIdVector.transform(X_neutral)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,Y_left)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,Y_neutral)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(Y_neutral,predLogReg2)

"""# Training on Right and test it on left"""

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(X_Right)
trainFeatureSet = countVector.transform(X_Right)
testFeatureSet = countVector.transform(X_left)

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,Y_Right)

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,Y_left)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(Y_left,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(X_Right)
tfidTestFeatures = tfIdVector.transform(X_left)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,Y_Right)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,Y_left)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(Y_left,predLogReg2)

"""# Train on Right and Test on Neutral"""

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(X_Right)
trainFeatureSet = countVector.transform(X_Right)
testFeatureSet = countVector.transform(X_neutral)

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,Y_Right)

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,Y_neutral)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(Y_neutral,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(X_Right)
tfidTestFeatures = tfIdVector.transform(X_neutral)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,Y_Right)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,Y_neutral)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(Y_neutral,predLogReg2)

"""# Train on Nuetral and Test on Nuetral"""

train_text, test_text, train_labels, test_labels = train_test_split(X_neutral, Y_neutral, train_size=0.7, random_state=5)

print("Train x size :", train_text.shape)
print("Train y size :", train_labels.shape)
print("Test x size :", test_text.shape)
print("Test y size :", test_labels.shape)

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(train_text)
trainFeatureSet = countVector.transform(train_text)
testFeatureSet = countVector.transform(test_text)

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,train_labels)

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,test_labels)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(test_labels,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(train_text)
tfidTestFeatures = tfIdVector.transform(test_text)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,train_labels)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,test_labels)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(test_labels,predLogReg2)

"""# Train on neutral and test on left"""

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(X_neutral)
trainFeatureSet = countVector.transform(X_neutral)
testFeatureSet = countVector.transform(X_left)

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,Y_neutral)

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,Y_left)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(Y_left,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(X_neutral)
tfidTestFeatures = tfIdVector.transform(X_left)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,Y_neutral)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,Y_left)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(Y_left,predLogReg2)

"""# Train on neutral and test on Right"""

# Extracting features by counting word counts
countVector = CountVectorizer(min_df=2)
countVector.fit_transform(X_neutral)
trainFeatureSet = countVector.transform(X_neutral)
testFeatureSet = countVector.transform(X_Right)

#Logistic Regression Model for training Data using s
logRegModel = LogisticRegression()
logRegModel.fit(trainFeatureSet,Y_neutral)

# Finding the predictions of text dataset
predLogReg1 = logRegModel.predict(testFeatureSet)
score = logRegModel.score(testFeatureSet,Y_Right)
print("Approximate Accuracy with countVectorizer : ", score*100)

print_evaluators(Y_Right,predLogReg1)

# Extracting Features with TdIdf
tfIdVector = TfidfVectorizer(min_df=6,norm='l2',smooth_idf=True,use_idf=True)

#Extracting train and test features
tfidTrainFeatures = tfIdVector.fit_transform(X_neutral)
tfidTestFeatures = tfIdVector.transform(X_Right)

#Logistic Regression Model for training Data with tfid features
logRegModel2 = LogisticRegression()
logRegModel2.fit(tfidTrainFeatures,Y_neutral)

# Finding the predictions of text dataset
predLogReg2 = logRegModel2.predict(tfidTestFeatures)
score2 = logRegModel2.score(tfidTestFeatures,Y_Right)
print("Approximate Accuracy with TfIdf : ", score2*100)

print_evaluators(Y_Right,predLogReg2)





