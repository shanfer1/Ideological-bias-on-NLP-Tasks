# -*- coding: utf-8 -*-
"""Support Vector Machine - Final Results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uHa-Sle6l4Phz06GeJkc2HCy8lh3LTbL
"""

import pandas as pd
import tweepy
import numpy as np
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.preprocessing import LabelEncoder
from collections import defaultdict
from nltk.corpus import wordnet as wn
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import model_selection, naive_bayes, svm
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import re

"""# Getting preprocessed data for CNN from CSV file"""

np.random.seed(500)
preprocessedData_CNN = pd.read_csv('./data/preprocessed_nov_23_df_cnn_topic_combined.csv',delimiter=',',encoding='latin-1')
preprocessedData_CNN.head()

"""# Getting preprocessed data for FOX from CSV file"""

np.random.seed(500)
preprocessedData_Fox = pd.read_csv('./data/preprocessed_nov_23_df_fox_topic_combined.csv',delimiter=',',encoding='latin-1')
preprocessedData_Fox.head()

"""# Getting preprocessed data for REUTERS from CSV file"""

np.random.seed(500)
preprocessedData_Reuters = pd.read_csv('./data/preprocessed_nov_23_df_reuters_topic_combined.csv',delimiter=',',encoding='latin-1')
preprocessedData_Reuters.head()

"""# Remove hyperlinks from preprocessed data"""

def remove_hyperlinks(data_frame):
    data_frame['clean_text_final'] = data_frame['clean_text'].apply(lambda x: re.split('https:\/\/.*', str(x))[0])

remove_hyperlinks(preprocessedData_CNN)
remove_hyperlinks(preprocessedData_Fox)
remove_hyperlinks(preprocessedData_Reuters)

preprocessedData_CNN

sns.countplot(preprocessedData_CNN.topic)
plt.xlabel('Category')
plt.title('CountPlot')

sns.countplot(preprocessedData_Fox.topic)
plt.xlabel('Category')
plt.title('CountPlot')

sns.countplot(preprocessedData_Reuters.topic)
plt.xlabel('Category')
plt.title('CountPlot')

"""# Training on CNN and testing on FOX and Reuters"""

Train_X_CNN, Train_Y_CNN = preprocessedData_CNN['clean_text_final'], preprocessedData_CNN['topicEncoded']
Test_X_FOX, Test_Y_FOX = preprocessedData_Fox['clean_text_final'], preprocessedData_Fox['topicEncoded']
Test_X_Reuters, Test_Y_Reuters = preprocessedData_Reuters['clean_text_final'], preprocessedData_Reuters['topicEncoded']

"""# Testing with FOX News"""

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(preprocessedData_CNN['clean_text_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X_CNN)
Test_X_Tfidf = Tfidf_vect.transform(Test_X_FOX)

# print(Tfidf_vect.vocabulary_)

# Classifier - Algorithm - SVM
# fit the training dataset on the classifier
SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y_CNN)
# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)
# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Test_Y_FOX)*100)

print(classification_report(Test_Y_FOX,predictions_SVM))

"""# Testing with Reuters NEWS"""

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(preprocessedData_CNN['clean_text_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X_CNN)
Test_X_Tfidf = Tfidf_vect.transform(Test_X_Reuters)

# print(Tfidf_vect.vocabulary_)

# Classifier - Algorithm - SVM
# fit the training dataset on the classifier
SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y_CNN)
# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)
# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Test_Y_Reuters)*100)

print(classification_report(Test_Y_Reuters,predictions_SVM))

"""# Training on FOX and testing on CNN and Reuters"""

Train_X_FOX, Train_Y_FOX = preprocessedData_Fox['clean_text_final'], preprocessedData_Fox['topicEncoded']
Test_X_CNN, Test_Y_CNN = preprocessedData_CNN['clean_text_final'], preprocessedData_CNN['topicEncoded']
Test_X_Reuters, Test_Y_Reuters = preprocessedData_Reuters['clean_text_final'], preprocessedData_Reuters['topicEncoded']

"""# Testing with CNN News"""

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(preprocessedData_Fox['clean_text_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X_FOX)
Test_X_Tfidf = Tfidf_vect.transform(Test_X_CNN)

# print(Tfidf_vect.vocabulary_)

# Classifier - Algorithm - SVM
# fit the training dataset on the classifier
SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y_FOX)
# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)
# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Test_Y_CNN)*100)

print(classification_report(Test_Y_CNN,predictions_SVM))

"""# Testing with Reuters News"""

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(preprocessedData_Fox['clean_text_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X_FOX)
Test_X_Tfidf = Tfidf_vect.transform(Test_X_Reuters)

# print(Tfidf_vect.vocabulary_)

# Classifier - Algorithm - SVM
# fit the training dataset on the classifier
SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y_FOX)
# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)
# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Test_Y_Reuters)*100)

print(classification_report(Test_Y_Reuters,predictions_SVM))

"""# Training on Reuters and testing on CNN and FOX"""

Train_X_Reuters, Train_Y_Reuters = preprocessedData_Reuters['clean_text_final'], preprocessedData_Reuters['topicEncoded']
Test_X_CNN, Test_Y_CNN = preprocessedData_CNN['clean_text_final'], preprocessedData_CNN['topicEncoded']
Test_X_FOX, Test_Y_FOX = preprocessedData_Fox['clean_text_final'], preprocessedData_Fox['topicEncoded']

"""# Testing with CNN News"""

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(preprocessedData_Reuters['clean_text_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X_Reuters)
Test_X_Tfidf = Tfidf_vect.transform(Test_X_CNN)

# print(Tfidf_vect.vocabulary_)

# Classifier - Algorithm - SVM
# fit the training dataset on the classifier
SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y_Reuters)
# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)
# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Test_Y_CNN)*100)

print(classification_report(Test_Y_CNN,predictions_SVM))

"""# Testing with FOX News"""

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(preprocessedData_Reuters['clean_text_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X_Reuters)
Test_X_Tfidf = Tfidf_vect.transform(Test_X_FOX)

# print(Tfidf_vect.vocabulary_)

# Classifier - Algorithm - SVM
# fit the training dataset on the classifier
SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y_Reuters)
# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)
# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Test_Y_FOX)*100)

print(classification_report(Test_Y_FOX,predictions_SVM))

"""# Testing with Reuters News"""

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(preprocessedData_Reuters['clean_text_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X_Reuters)
Test_X_Tfidf = Tfidf_vect.transform(Train_X_Reuters)

# print(Tfidf_vect.vocabulary_)

# Classifier - Algorithm - SVM
# fit the training dataset on the classifier
SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y_Reuters)
# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)
# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Train_Y_Reuters)*100)

print(classification_report(Train_Y_Reuters,predictions_SVM))

